# build-system

[build-system]
requires = ["setuptools", "setuptools_scm[toml]"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/_version.py"

# project

[project]
name = "geochem-dataset"
description = "A package for managing geochemistry datasets."
authors = [
    {name = "Canada-Nunavut Geoscience Office", email = "cngo-bgcn@nrcan-rncan.gc.ca"},
    {name = "Serge Basso", email = "serge.basso@ssc-spc.gc.ca"},
    {name = "Tommy Tremblay", email = "tommy.tremblay@nrcan-rncan.gc.ca"},
]
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE.txt"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "appdirs >= 1.4",
    "openpyxl >= 3.0",
    "pandas >= 1.3",
    "pysimplegui >= 4.55",
    "peewee >= 3.15",
    "tqdm >= 4.64",
    "traitlets >= 5.5",
]
dynamic = ["version"]

[project.urls]
repository = "https://github.com/cngo/geochem-dataset/"

[project.optional-dependencies]
dev = [
    "ipython",
    "ipdb",
]
tests = [
    "coverage[toml]",
    "pytest",
    "pytest-cov",
    "tox",
    "pyyaml",
]

[project.scripts]
geochem-dataset-tools = "geochem_dataset.tools.__main__:main"

# tool.pytest

[tool.pytest.ini_options]
addopts = [
    "--cov=geochem_dataset",
    "--cov-report=term-missing",
    "--verbose",
]
norecursedirs = [
    ".tox",
    "build",
    "dist",
    "tests/helpers",
]
testpaths = [
    "tests",
]

[tool.pytest.ini_options.markers]
slow = "mark tests as slow (deselect with '-m \"not slow\"')"
system = "mark end-to-end system tests"

# tool.coverage

[tool.coverage.run]
branch = true
source = ["geochem_dataset"]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]
